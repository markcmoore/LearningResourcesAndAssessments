::SOLID
::S.O.L.I.D. is five design principles intended to make software designs ___.
{
=more understandable
~fluid
~more extensible
~easier to write
}

::SOLID
::Single Responsibility Principle means
{
=A class should only have one responsibility. 
~A namespace should only have one responsibility.
~A program should only have one responsibility.
~A property should only have one responsibility.
}

::SOLID
::Open-Closed Principle means
{
=A class should be open for extensions but closed to modifications. 
~Modules and classes must be written in such a way that new functionality can be added only when new methods are generated.
~Programs must be designed in such a way that new functionality can be added only when new requirements are written.
~A class should be open for modification but closed to extension.
}

::SOLID
::Liskov Substitution Principle means
{
=Derived classes must implement all the methods and fields of their parent.
~Functions that use pointers of references to base classes must be able to use objects 
~Each interface should have a specific purpose or responsibility. 
~High-level modules/classes implement business rules or logic in a system (front-end). 
}

::SOLID
::Dependency Inversion Principle means
{
=High-level modules/classes implement business rules or logic in a system (front-end). 
~Each interface should have a specific purpose or responsibility. 
~You will be able to use any derived class instead of a parent class and it will behave in the same manner.
~A class should be open for extensions but closed to modifications. 
}